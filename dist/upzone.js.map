{"version":3,"file":"upzone.js","sources":["../src/Dropzone.ts"],"sourcesContent":["import './styles/upzone.scss';\nimport { DropzoneOptions, FileItem } from '../types';\n\nexport default class Dropzone {\n    element: HTMLElement;\n    options: DropzoneOptions;\n    eventListeners: Record<string, Function[]>;\n    uploadedFiles: FileItem[];\n    queue: File[];\n    uploadingFiles: Map<File, XMLHttpRequest>;\n    dropzone: HTMLElement | null = null;\n    fileInput: HTMLInputElement | null = null;\n    fileList: HTMLElement | null = null;\n\n    constructor(element: HTMLElement, options: DropzoneOptions) {\n        if (!(element instanceof HTMLElement)) {\n            throw new Error('O primeiro parâmetro deve ser um elemento HTML válido.');\n        }\n\n        this.element = element;\n\n        this.options = {\n            ...{\n                autoRender: true,\n                autoQueue: true,\n                multipleUploads: true,\n                url: '/upload',\n                method: 'POST',\n                headers: {},\n                params: {},\n                acceptedTypes: ['*'],\n                maxFileSize: Infinity,\n                minFileSize: 0,\n                messages: {\n                    default: 'Drag and drop your files here or <strong>Browse</strong>',\n                    invalidType: 'Invalid file type: {file}',\n                    invalidSize: 'Invalid file size: {file} ({size} KB)',\n                    uploadError: 'Error uploading file: {file}',\n                    uploadSuccess: 'File uploaded successfully: {file}',\n                    fileRemoved: 'File removed: {file}',\n                }\n            },\n            ...options,\n        };\n\n        this.eventListeners = {};\n        this.uploadedFiles = [];\n        this.queue = [];\n        this.uploadingFiles = new Map();\n\n        if (this.options.autoRender) {\n            this.createDropzone();\n            this.initialize();\n        }\n    }\n\n    createDropzone() {\n        const dropzone = document.createElement('div');\n        dropzone.id = 'dropzone';\n        dropzone.className = 'dropzone';\n        dropzone.innerHTML = `\n        ${this.options?.messages?.default}\n        <input type='file' id='fileInput' ${this.options.multipleUploads ? 'multiple' : ''} accept=\"${this.options.acceptedTypes.join(',')}\" style='display: none;' />`;\n\n        const fileList = document.createElement('ul');\n        fileList.id = 'fileList';\n        fileList.className = 'file-list';\n\n        this.element.appendChild(dropzone);\n        this.element.appendChild(fileList);\n    }\n\n    initialize() {\n        this.dropzone = this.element.querySelector('#dropzone');\n        this.fileInput = this.element.querySelector('#fileInput');\n        this.fileList = this.element.querySelector('#fileList');\n\n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        if (!this.dropzone || !this.fileInput) return;\n\n        this.dropzone.addEventListener('dragover', this.handleDragOver.bind(this));\n        this.dropzone.addEventListener('dragleave', this.handleDragLeave.bind(this));\n        this.dropzone.addEventListener('drop', this.handleDrop.bind(this));\n        this.dropzone.addEventListener('click', () => this.fileInput?.click());\n        this.fileInput.addEventListener('change', this.handleFileSelect.bind(this));\n    }\n\n    handleDragOver(event: DragEvent) {\n        event.preventDefault();\n        if (this.dropzone) {\n            this.dropzone.classList.add('drag-over');\n        }\n    }\n\n    handleDragLeave(event: DragEvent) {\n        event.preventDefault();\n        if (this.dropzone) {\n            this.dropzone.classList.remove('drag-over');\n        }\n    }\n\n    handleDrop(event: DragEvent) {\n        event.preventDefault();\n        if (this.dropzone) {\n            this.dropzone.classList.remove('drag-over');\n        }\n\n        const files = event.dataTransfer?.files;\n        if (files) {\n            this.validateAndHandleFiles(files);\n        }\n    }\n\n    handleFileSelect(event: Event) {\n        const input = event.target as HTMLInputElement;\n        const files = input.files;\n        if (files) {\n            this.validateAndHandleFiles(files);\n        }\n    }\n\n    validateAndHandleFiles(files: FileList) {\n        Array.from(files).forEach((file) => {\n            if (!this.isValidFileType(file)) {\n                const message = this.formatMessage(this.options.messages.invalidType, {\n                    file: file.name,\n                });\n                this.emit('uploaderror', { file: { name: file.name, size: file.size }, message });\n                return;\n            }\n\n            if (!this.isValidFileSize(file)) {\n                const sizeInKB = (file.size / 1024).toFixed(1);\n                const message = this.formatMessage(this.options.messages.invalidSize, {\n                    file: file.name,\n                    size: sizeInKB,\n                });\n                this.emit('uploaderror', { file: { name: file.name, size: file.size }, message });\n                return;\n            }\n\n            this.emit('fileadded', { name: file.name, size: file.size });\n            this.addFileToList(file);\n            if (this.options.autoQueue) {\n                this.uploadFile(file);\n            } else {\n                this.queue.push(file);\n            }\n        });\n    }\n\n    isValidFileType(file: File): boolean {\n        const acceptedTypes = this.options.acceptedTypes;\n        return (\n            acceptedTypes.includes('*') ||\n            acceptedTypes.some((type) => file.type.includes(type))\n        );\n    }\n\n    isValidFileSize(file: File): boolean {\n        return (\n            file.size >= this.options.minFileSize &&\n            file.size <= this.options.maxFileSize\n        );\n    }\n\n    addFileToList(file: File) {\n        const listItem = document.createElement('li');\n        listItem.classList.add('file-list-item');\n\n        const previewContainer = document.createElement('div');\n        previewContainer.className = 'file-preview';\n\n        const preview = document.createElement('div');\n        preview.className = 'preview';\n\n        if (file.type.startsWith('image/')) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                preview.style.backgroundImage = `url(${e.target?.result})`;\n            };\n            reader.readAsDataURL(file);\n        } else {\n            preview.classList.add('file-icon'); // Adiciona classe para SVG\n        }\n\n        previewContainer.appendChild(preview);\n\n        const info = document.createElement('div');\n        info.className = 'file-info';\n        info.innerHTML = `<span class=\"file-name\">${file.name}</span><span class=\"file-info\">${(file.size / 1024).toFixed(1)} KB</span>`;\n\n        previewContainer.appendChild(info);\n        listItem.appendChild(previewContainer);\n\n        const removeButton = document.createElement('button');\n        removeButton.className = 'remove-btn';\n        removeButton.innerHTML = '&times;';\n        removeButton.addEventListener('click', () => {\n            this.fileList?.removeChild(listItem);\n            this.uploadedFiles = this.uploadedFiles.filter((f) => f.name !== file.name);\n            const message = this.formatMessage(this.options.messages.fileRemoved, {\n                file: file.name,\n            });\n            this.emit('fileremoved', { file: { name: file.name, size: file.size }, message });\n        });\n\n        listItem.appendChild(removeButton);\n        this.fileList?.appendChild(listItem);\n\n        (file as FileItem).listItem = listItem; // Reference for progress update\n    }\n\n    uploadFile(file: File) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        for (const [key, value] of Object.entries(this.options.params)) {\n            formData.append(key, value);\n        }\n\n        const xhr = new XMLHttpRequest();\n        xhr.open(this.options.method ?? 'POST', this.options.url ?? '/upload');\n\n        for (const [header, value] of Object.entries(this.options.headers)) {\n            xhr.setRequestHeader(header, value);\n        }\n\n        this.uploadingFiles.set(file, xhr);\n\n        xhr.upload.addEventListener('progress', (event) => {\n            if (event.lengthComputable) {\n                const percentComplete = (event.loaded / event.total) * 100;\n\n                if (file.listItem) {\n                    file.listItem.classList.add('uploading');\n                    file.listItem.style.backgroundSize = `${percentComplete}% 100%`;\n                    const fileInfo = file.listItem.querySelector('span.file-info');\n                    if (fileInfo) {\n                        fileInfo.textContent = `Uploading... (${percentComplete.toFixed(1)}%)`;\n                    }\n                }\n            }\n        });\n\n        xhr.onload = () => {\n            if (file.listItem) {\n                file.listItem.classList.remove('uploading');\n            }\n\n            if (xhr.status === 200 || xhr.status === 201) {\n                const message = this.formatMessage(this.options.messages.uploadSuccess, {\n                    file: file.name,\n                });\n\n                if (file.listItem) {\n                    file.listItem.classList.add('uploaded');\n                    const fileInfo = file.listItem.querySelector('span.file-info');\n                    if (fileInfo) {\n                        fileInfo.textContent = `${file.name} uploaded successfully.`;\n                    }\n                }\n\n                this.emit('uploadsuccess', { file: { name: file.name, size: file.size }, message });\n            } else {\n                const message = this.formatMessage(this.options.messages.uploadError, {\n                    file: file.name,\n                });\n                this.emit('uploaderror', { file: { name: file.name, size: file.size }, message });\n            }\n\n            this.uploadingFiles.delete(file);\n        };\n\n        xhr.onerror = () => {\n            const message = this.formatMessage(this.options.messages.uploadError, {\n                file: file.name,\n            });\n            this.emit('uploaderror', { file: { name: file.name, size: file.size }, message });\n            this.uploadingFiles.delete(file);\n        };\n\n        xhr.send(formData);\n    }\n\n    formatMessage(message: string, replacements: Record<string, string>): string {\n        return message.replace(/{(.*?)}/g, (_, key) => replacements[key] || '');\n    }\n\n    emit(event: string, data: any) {\n        const listeners = this.eventListeners[event];\n        if (listeners) {\n            listeners.forEach((callback) => callback(data));\n        }\n    }\n\n    on(event: string, callback: Function) {\n        if (!this.eventListeners[event]) {\n            this.eventListeners[event] = [];\n        }\n        this.eventListeners[event].push(callback);\n    }\n}  "],"names":["constructor","element","options","this","dropzone","fileInput","fileList","HTMLElement","Error","Object","assign","autoRender","autoQueue","multipleUploads","url","method","headers","params","acceptedTypes","maxFileSize","Infinity","minFileSize","messages","default","invalidType","invalidSize","uploadError","uploadSuccess","fileRemoved","eventListeners","uploadedFiles","queue","uploadingFiles","Map","createDropzone","initialize","document","createElement","id","className","innerHTML","_b","_a","join","appendChild","querySelector","setupEventListeners","addEventListener","handleDragOver","bind","handleDragLeave","handleDrop","click","handleFileSelect","event","preventDefault","classList","add","remove","files","dataTransfer","validateAndHandleFiles","target","Array","from","forEach","file","isValidFileType","isValidFileSize","emit","name","size","addFileToList","uploadFile","push","sizeInKB","toFixed","message","formatMessage","includes","some","type","listItem","previewContainer","preview","startsWith","reader","FileReader","onload","e","style","backgroundImage","result","readAsDataURL","info","removeButton","removeChild","filter","f","formData","FormData","append","key","value","entries","xhr","XMLHttpRequest","open","header","setRequestHeader","set","upload","lengthComputable","percentComplete","loaded","total","backgroundSize","fileInfo","textContent","status","delete","onerror","send","replacements","replace","_","data","listeners","callback","on"],"mappings":"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"}